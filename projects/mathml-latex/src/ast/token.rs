use super::attribute::{Accent, Variant};
use crate::ast::DisplayStyle;

#[derive(Debug, Clone, PartialEq)]
pub enum Token {
    Illegal(char),
    EOF,
    Begin,
    End,
    Ampersand,
    NewLine,
    Left,
    Right,
    Middle,
    Paren(&'static str),
    LBrace,
    RBrace,
    Frac,
    Underscore,
    Circumflex,
    Binom(Option<DisplayStyle>),
    Overset,
    Underset,
    Overbrace(char),
    Underbrace(char),
    Sqrt,
    Integral(char),
    Lim(&'static str),
    Space(f32),
    Style(Variant),
    Big(&'static str),
    Over(char, Accent),
    Under(char, Accent),
    Operator(char),
    BigOp(char),
    Letter(char, Variant),
    Number(String),
    Function(&'static str),
    OperatorName,
    Slashed,
    Text,
    Command(String),
}

impl Token {
    pub(crate) fn acts_on_a_digit(&self) -> bool {
        match self {
            Token::Sqrt | Token::Frac | Token::Binom(_) | Token::Style(_) => true,
            _ => false,
        }
    }

    pub fn from_command(command: &str) -> Token {
        match command {
            "mathrm" => Token::Style(Variant::Normal),
            "textit" => Token::Style(Variant::Italic),
            "mathit" => Token::Style(Variant::Italic),
            "textbf" => Token::Style(Variant::Bold),
            "mathbf" => Token::Style(Variant::Bold),
            "bm" => Token::Style(Variant::BoldItalic),
            "symbf" => Token::Style(Variant::BoldItalic),
            "mathbb" => Token::Style(Variant::DoubleStruck),
            "mathfrak" => Token::Style(Variant::Fraktur),
            "mathscr" => Token::Style(Variant::Script),
            "mathsf" => Token::Style(Variant::SansSerif),
            "texttt" => Token::Style(Variant::Monospace),
            "boldsymbol" => Token::Style(Variant::BoldItalic),
            "text" => Token::Text,
            "sqrt" => Token::Sqrt,
            "frac" => Token::Frac,
            "left" => Token::Left,
            "right" => Token::Right,
            "middle" => Token::Middle,
            "begin" => Token::Begin,
            "end" => Token::End,
            "\\" => Token::NewLine,
            "binom" => Token::Binom(None),
            "tbinom" => Token::Binom(Some(DisplayStyle::Inline)),
            "dbinom" => Token::Binom(Some(DisplayStyle::Block)),
            "overset" => Token::Overset,
            "underset" => Token::Underset,
            "overbrace" => Token::Overbrace('\u{23de}'),
            "underbrace" => Token::Underbrace('\u{23df}'),
            "overparen" => Token::Overbrace('\u{23dc}'),
            "underparen" => Token::Underbrace('\u{23dd}'),
            "overbracket" => Token::Overbrace('\u{23b4}'),
            "underbracket" => Token::Underbrace('\u{23b5}'),
            "!" => Token::Space(-3. / 18.),
            "," => Token::Space(3. / 18.),
            ":" => Token::Space(4. / 18.),
            ";" => Token::Space(5. / 18.),
            " " => Token::Space(1.),
            "quad" => Token::Space(1.),
            "qquad" => Token::Space(2.),
            "langle" => Token::Paren("&lang;"),
            "rangle" => Token::Paren("&rang;"),
            "{" => Token::Paren("{"),
            "}" => Token::Paren("}"),
            "lceil" => Token::Paren("⌈"),
            "rceil" => Token::Paren("⌉"),
            "lfloor" => Token::Paren("⌊"),
            "rfloor" => Token::Paren("⌋"),
            "lgroup" => Token::Paren("⦗"),
            "rgroup" => Token::Paren("⦘"),
            "llbracket" => Token::Paren("⟦"),
            "rrbracket" => Token::Paren("⟧"),
            "lim" => Token::Lim("lim"),
            "liminf" => Token::Lim("lim inf"),
            "limsup" => Token::Lim("lim sup"),
            "min" => Token::Lim("min"),
            "max" => Token::Lim("max"),
            "inf" => Token::Lim("inf"),
            "sup" => Token::Lim("sup"),
            "int" => Token::Integral('∫'),
            "iint" => Token::Integral('∬'),
            "iiint" => Token::Integral('∭'),
            "oint" => Token::Integral('∮'),
            "dot" => Token::Over('\u{02d9}', Accent::True),
            "ddot" => Token::Over('¨', Accent::True),
            "bar" => Token::Over('¯', Accent::True),
            "hat" => Token::Over('^', Accent::True),
            "check" => Token::Over('ˇ', Accent::True),
            "breve" => Token::Over('˘', Accent::True),
            "acute" => Token::Over('´', Accent::True),
            "grave" => Token::Over('`', Accent::True),
            "tilde" => Token::Over('~', Accent::True),
            "vec" => Token::Over('→', Accent::True),
            "overline" => Token::Over('_', Accent::True),
            "underline" => Token::Under('_', Accent::True),
            "widehat" => Token::Over('^', Accent::True),
            "widetilde" => Token::Over('~', Accent::True),
            "overrightarrow" => Token::Over('→', Accent::True),
            "overleftarrow" => Token::Over('←', Accent::True),
            "sum" => Token::BigOp('∑'),
            "prod" => Token::BigOp('∏'),
            "coprod" => Token::BigOp('∐'),
            "bigcap" => Token::BigOp('⋂'),
            "bigcup" => Token::BigOp('⋃'),
            "bigsqcup" => Token::BigOp('⨆'),
            "bigvee" => Token::BigOp('⋁'),
            "bigwedge" => Token::BigOp('⋀'),
            "bigodot" => Token::BigOp('⨀'),
            "bitotimes" => Token::BigOp('⨂'),
            "bigoplus" => Token::BigOp('⨁'),
            "biguplus" => Token::BigOp('⨄'),
            "bigl" => Token::Big("1.2em"),
            "bigr" => Token::Big("1.2em"),
            "Bigl" => Token::Big("1.623em"),
            "Bigr" => Token::Big("1.623em"),
            "biggl" => Token::Big("2.047em"),
            "biggr" => Token::Big("2.047em"),
            "Biggl" => Token::Big("2.470em"),
            "Biggr" => Token::Big("2.470em"),
            // <math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
            //   <semantics>
            //     <mrow>
            //         <mi>a</mi>
            //         <mrow class="MJX-TeXAtom-OPEN"><mo maxsize="2.470em" minsize="2.470em">(</mo></ mrow>
            //         <mi>b</mi>
            //         <mrow class="MJX-TeXAtom-OPEN"><mo maxsize="2.047em" minsize="2.047em">(</mo></mrow>
            //         <mi>c</mi>
            //         <mrow class="MJX-TeXAtom-OPEN"><mo maxsize="1.623em" minsize="1.623em">(</mo></mrow>
            //         <mi>d</mi>
            //         <mrow class="MJX-TeXAtom-OPEN"><mo maxsize="1.2em" minsize="1.2em">(</mo></mrow>
            //         <mi>e</mi>
            //         <mo stretchy="false">(</mo>
            //         <mi>f</mi>
            //         <mo>+</mo>
            //         <mi>g</mi>
            //         <mo stretchy="false">)</mo>
            //         <mrow class="MJX-TeXAtom-CLOSE"><mo maxsize="1.2em" minsize="1.2em">)</mo></mrow>
            //         <mrow class="MJX-TeXAtom-CLOSE"><mo maxsize="1.623em" minsize="1.623em">)</mo></mrow>
            //         <mrow class="MJX-TeXAtom-CLOSE"><mo maxsize="2.047em" minsize="2.047em">)</mo></mrow>
            //         <mrow class="MJX-TeXAtom-CLOSE"><mo maxsize="2.470em" minsize="2.470em">)</mo></mrow>
            //   </semantics>
            // </math>
            "sin" => Token::Function("sin"),
            "cos" => Token::Function("cos"),
            "tan" => Token::Function("tan"),
            "csc" => Token::Function("csc"),
            "sec" => Token::Function("sec"),
            "cot" => Token::Function("cot"),
            "arcsin" => Token::Function("arcsin"),
            "arccos" => Token::Function("arccos"),
            "arctan" => Token::Function("arctan"),
            "sinh" => Token::Function("sinh"),
            "cosh" => Token::Function("cosh"),
            "tanh" => Token::Function("tanh"),
            "coth" => Token::Function("coth"),
            "exp" => Token::Function("exp"),
            "ln" => Token::Function("ln"),
            "log" => Token::Function("log"),
            "erf" => Token::Function("erf"),
            "erfc" => Token::Function("erfc"),
            "arg" => Token::Function("arg"),
            "ker" => Token::Function("ker"),
            "dim" => Token::Function("dim"),
            "det" => Token::Function("det"),
            "wp" => Token::Function("℘"),
            "operatorname" => Token::OperatorName,
            "Alpha" => Token::Letter('Α', Variant::Normal),
            "alpha" => Token::Letter('α', Variant::Italic),
            "Beta" => Token::Letter('Β', Variant::Normal),
            "beta" => Token::Letter('β', Variant::Italic),
            "Gamma" => Token::Letter('Γ', Variant::Normal),
            "gamma" => Token::Letter('γ', Variant::Italic),
            "digamma" => Token::Letter('ϝ', Variant::Italic),
            "Delta" => Token::Letter('Δ', Variant::Normal),
            "delta" => Token::Letter('δ', Variant::Italic),
            "Epsilon" => Token::Letter('Ε', Variant::Normal),
            "epsilon" => Token::Letter('ϵ', Variant::Italic),
            "varepsilon" => Token::Letter('ε', Variant::Italic),
            "Zeta" => Token::Letter('Ζ', Variant::Normal),
            "zeta" => Token::Letter('ζ', Variant::Italic),
            "Eta" => Token::Letter('Η', Variant::Normal),
            "eta" => Token::Letter('η', Variant::Italic),
            "Theta" => Token::Letter('Θ', Variant::Normal),
            "theta" => Token::Letter('θ', Variant::Italic),
            "vartheta" => Token::Letter('ϑ', Variant::Italic),
            "Iota" => Token::Letter('Ι', Variant::Normal),
            "iota" => Token::Letter('ι', Variant::Italic),
            "Kappa" => Token::Letter('Κ', Variant::Normal),
            "kappa" => Token::Letter('κ', Variant::Italic),
            "Lambda" => Token::Letter('Λ', Variant::Normal),
            "lambda" => Token::Letter('λ', Variant::Italic),
            "Mu" => Token::Letter('Μ', Variant::Normal),
            "mu" => Token::Letter('μ', Variant::Italic),
            "Nu" => Token::Letter('Ν', Variant::Normal),
            "nu" => Token::Letter('ν', Variant::Italic),
            "Xi" => Token::Letter('Ξ', Variant::Normal),
            "xi" => Token::Letter('ξ', Variant::Italic),
            "Omicron" => Token::Letter('Ο', Variant::Normal),
            "omicron" => Token::Letter('ο', Variant::Italic),
            "Pi" => Token::Letter('Π', Variant::Normal),
            "pi" => Token::Letter('π', Variant::Italic),
            "varpi" => Token::Letter('ϖ', Variant::Italic),
            "Rho" => Token::Letter('Ρ', Variant::Normal),
            "rho" => Token::Letter('ρ', Variant::Italic),
            "varrho" => Token::Letter('ϱ', Variant::Italic),
            "Sigma" => Token::Letter('Σ', Variant::Normal),
            "sigma" => Token::Letter('σ', Variant::Italic),
            "varsigma" => Token::Letter('ς', Variant::Italic),
            "Tau" => Token::Letter('Τ', Variant::Normal),
            "tau" => Token::Letter('τ', Variant::Italic),
            "Upsilon" => Token::Letter('Υ', Variant::Normal),
            "upsilon" => Token::Letter('υ', Variant::Italic),
            "Phi" => Token::Letter('Φ', Variant::Normal),
            "phi" => Token::Letter('ϕ', Variant::Italic),
            "varphi" => Token::Letter('φ', Variant::Italic),
            "Chi" => Token::Letter('Χ', Variant::Normal),
            "chi" => Token::Letter('χ', Variant::Italic),
            "Psi" => Token::Letter('Ψ', Variant::Normal),
            "psi" => Token::Letter('ψ', Variant::Italic),
            "Omega" => Token::Letter('Ω', Variant::Normal),
            "omega" => Token::Letter('ω', Variant::Italic),
            "aleph" => Token::Letter('ℵ', Variant::Normal),
            "beth" => Token::Letter('ℶ', Variant::Normal),
            "gimel" => Token::Letter('ℷ', Variant::Normal),
            "daleth" => Token::Letter('ℸ', Variant::Normal),
            "A" => Token::Letter('Å', Variant::Normal),
            "a" => Token::Letter('å', Variant::Normal),
            "AE" => Token::Letter('Æ', Variant::Normal),
            "ae" => Token::Letter('æ', Variant::Normal),
            "DH" => Token::Letter('Ð', Variant::Normal),
            "dh" => Token::Letter('ð', Variant::Normal),
            "dj" => Token::Letter('đ', Variant::Normal),
            "L" => Token::Letter('Ł', Variant::Normal),
            "l" => Token::Letter('ł', Variant::Normal),
            "NG" => Token::Letter('Ŋ', Variant::Normal),
            "ng" => Token::Letter('ŋ', Variant::Normal),
            "O" => Token::Letter('Ø', Variant::Normal),
            "o" => Token::Letter('ø', Variant::Normal),
            "OE" => Token::Letter('Œ', Variant::Normal),
            "oe" => Token::Letter('œ', Variant::Normal),
            "ss" => Token::Letter('ß', Variant::Normal),
            "TH" => Token::Letter('Þ', Variant::Normal),
            "th" => Token::Letter('þ', Variant::Normal),
            "imath" => Token::Letter('ı', Variant::Italic),
            "jmath" => Token::Letter('ȷ', Variant::Italic),
            "ell" => Token::Letter('ℓ', Variant::Italic),
            "hbar" => Token::Letter('ℏ', Variant::Italic),
            "hslash" => Token::Letter('ℏ', Variant::Italic),
            "infty" => Token::Letter('∞', Variant::Normal),
            "mho" => Token::Letter('℧', Variant::Normal),
            "Finv" => Token::Letter('Ⅎ', Variant::Normal),
            "Re" => Token::Letter('ℜ', Variant::Normal),
            "Im" => Token::Letter('ℑ', Variant::Normal),
            "complement" => Token::Letter('∁', Variant::Normal),
            "emptyset" => Token::Letter('∅', Variant::Normal),
            "therefore" => Token::Letter('∴', Variant::Normal),
            "because" => Token::Letter('∵', Variant::Normal),
            "Diamond" => Token::Letter('◊', Variant::Normal),
            "Box" => Token::Letter('◻', Variant::Normal),
            "triangle" => Token::Letter('△', Variant::Normal),
            "angle" => Token::Letter('∠', Variant::Normal),
            "dagger" => Token::Letter('†', Variant::Normal),
            "dag" => Token::Letter('†', Variant::Normal),
            "Dagger" => Token::Letter('‡', Variant::Normal),
            "ddag" => Token::Letter('‡', Variant::Normal),
            "And" => Token::Letter('&', Variant::Normal),
            "eth" => Token::Letter('ð', Variant::Normal),
            "S" => Token::Letter('§', Variant::Normal),
            "P" => Token::Letter('¶', Variant::Normal),
            "%" => Token::Letter('%', Variant::Normal),
            "_" => Token::Letter('_', Variant::Normal),
            "&" => Token::Letter('&', Variant::Normal),
            "#" => Token::Letter('#', Variant::Normal),
            "$" => Token::Letter('$', Variant::Normal),
            "copyright" => Token::Letter('©', Variant::Normal),
            "checkmark" => Token::Letter('✓', Variant::Normal),
            "circledR" => Token::Letter('Ⓡ', Variant::Normal),
            "maltese" => Token::Letter('✠', Variant::Normal),
            "colon" => Token::Letter(':', Variant::Normal),
            "bigtriangleup" => Token::Letter('△', Variant::Normal),
            "sphericalangle" => Token::Letter('∢', Variant::Normal),
            "square" => Token::Letter('□', Variant::Normal),
            "lozenge" => Token::Letter('◊', Variant::Normal),
            "diamondsuit" => Token::Letter('♢', Variant::Normal),
            "heartsuit" => Token::Letter('♡', Variant::Normal),
            "clubsuit" => Token::Letter('♣', Variant::Normal),
            "spadesuit" => Token::Letter('♠', Variant::Normal),
            "Game" => Token::Letter('⅁', Variant::Normal),
            "flat" => Token::Letter('♭', Variant::Normal),
            "natural" => Token::Letter('♮', Variant::Normal),
            "sharp" => Token::Letter('♯', Variant::Normal),
            "pounds" => Token::Letter('£', Variant::Normal),
            "textyen" => Token::Letter('¥', Variant::Normal),
            "euro" => Token::Letter('€', Variant::Normal),
            "rupee" => Token::Letter('₹', Variant::Normal),
            "sun" => Token::Letter('☼', Variant::Normal),
            "mercury" => Token::Letter('☿', Variant::Normal),
            "venus" => Token::Letter('♀', Variant::Normal),
            "earth" => Token::Letter('♁', Variant::Normal),
            "mars" => Token::Letter('♂', Variant::Normal),
            "jupiter" => Token::Letter('♃', Variant::Normal),
            "saturn" => Token::Letter('♄', Variant::Normal),
            "uranus" => Token::Letter('♅', Variant::Normal),
            "neptune" => Token::Letter('♆', Variant::Normal),
            "astrosun" => Token::Letter('☉', Variant::Normal),
            "ascnode" => Token::Letter('☊', Variant::Normal),

            "slashed" => Token::Slashed,
            command => Token::Command(command.to_owned()),
        }
    }
}
